/**
 * # Parameters for nf-maccoss-trex
 *
 * A NextFlow pipeline for analyzing data-ind
 */
params {

    // the file associated with a Nextflow workflow that lists docker images in this format:
    // https://raw.githubusercontent.com/mriffle/nf-skyline-dia-ms/main/container_images.config
    docker_images_file = null

    // directories to store and build apptainer containers
    apptainer_cache_dir = null
    apptainer_tmp_dir = null

    email = null
}

// Execution Profiles
profiles {

    /*
     * Params for running pipeline on the local computer (e.g.:
     * your laptop). These can be overridden in the local config file.
     */
    standard {
        process.executor = 'local'

        // limit nextflow to running 1 task at a time
        executor.queueSize = 1

        params.max_memory = '12.GB'
        params.max_cpus = 8
        params.max_time = '240.h'
    }

    // a rough outline of a Sun Grid Engine profile
    sge_maccoss {

        process.executor = 'sge'
        process.queue = 'your queue name'
        process.penv = 'serial'

        // set the requested memory to the total wanted amount divided by
        // by the number of requested cpus, rounded to two decimal places
        process.clusterOptions = {
            def memoryPerCpu = (task.memory.toGiga() / task.cpus)
            def roundedMemory = Math.floor(memoryPerCpu * 100) / 100
            return "-l mfree=${roundedMemory}G -pe serial ${task.cpus}"
        }

        // set these to appropriate values for the cluster nodes
        params.max_memory = '90.GB'
        params.max_cpus = 24
        params.max_time = '240.h'

    }
}

// Manifest
manifest {
    name            = 'nf-build-apptainer-images'
    author          = 'Michael Riffle'
    homePage        = 'https://github.com/mriffle/nf-build-apptainer-images'
    description     = 'Pre-build all apptainer images required by Nextflow workflow'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=21.10.3'
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit. Copied from the nf-core template.
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
